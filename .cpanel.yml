# cPanel Deployment Configuration
# This file defines how your Laravel application should be deployed on cPanel
# Documentation: https://docs.cpanel.net/knowledge-base/web-services/guide-to-git-deployment/

---
deployment:
  tasks:
    # Step 1: Set deployment path for your specific cPanel directory
    - export DEPLOYPATH=/home2/shemidig/parish_system/
    
    # Step 2: Deploy Laravel application files (excluding sensitive files)
    - /bin/cp -R app $DEPLOYPATH
    - /bin/cp -R bootstrap $DEPLOYPATH
    - /bin/cp -R config $DEPLOYPATH
    - /bin/cp -R database $DEPLOYPATH
    - /bin/cp -R public/* $DEPLOYPATH
    - /bin/cp -R resources $DEPLOYPATH
    - /bin/cp -R routes $DEPLOYPATH
    - /bin/cp -R storage $DEPLOYPATH
    - /bin/cp -R vendor $DEPLOYPATH
    - /bin/cp artisan $DEPLOYPATH
    - /bin/cp composer.json $DEPLOYPATH
    - /bin/cp composer.lock $DEPLOYPATH
    - /bin/cp package.json $DEPLOYPATH
    - /bin/cp vite.config.js $DEPLOYPATH
    - /bin/cp tailwind.config.js $DEPLOYPATH
    - /bin/cp postcss.config.js $DEPLOYPATH
    
    # Step 3: Copy .env.example as reference (your .env should already exist)
    - /bin/cp .env.example $DEPLOYPATH
    
    # Step 4: Verify .env file exists on server (user-configured)
    - |
      if [ -f $DEPLOYPATH/.env ]; then
        echo "‚úÖ .env file found and configured"
      else
        echo "‚ö†Ô∏è  WARNING: .env file not found! You may need to create it manually"
        echo "üìù Use .env.example as a template"
      fi

    # Step 5: Generate Laravel application key (if needed)
    - cd $DEPLOYPATH && /usr/local/bin/ea-php82 artisan key:generate --force
    - echo "‚úÖ Application key generated"

    # Step 6: Clear and optimize Laravel caches
    - cd $DEPLOYPATH && /usr/local/bin/ea-php82 artisan config:clear
    - cd $DEPLOYPATH && /usr/local/bin/ea-php82 artisan cache:clear
    - cd $DEPLOYPATH && /usr/local/bin/ea-php82 artisan route:clear
    - cd $DEPLOYPATH && /usr/local/bin/ea-php82 artisan view:clear
    - echo "‚úÖ Caches cleared"

    # Step 7: Run database migrations
    - cd $DEPLOYPATH && /usr/local/bin/ea-php82 artisan migrate --force
    - echo "‚úÖ Database migrations completed"

    # Step 8: Seed database with initial data (optional - comment out if not needed)
    # - cd $DEPLOYPATH && /usr/local/bin/ea-php82 artisan db:seed --force
    # - echo "‚úÖ Database seeding completed"

    # Step 9: Create storage symbolic link
    - cd $DEPLOYPATH && /usr/local/bin/ea-php82 artisan storage:link
    - echo "‚úÖ Storage link created"

    # Step 10: Optimize application for production
    - cd $DEPLOYPATH && /usr/local/bin/ea-php82 artisan config:cache
    - cd $DEPLOYPATH && /usr/local/bin/ea-php82 artisan route:cache  
    - cd $DEPLOYPATH && /usr/local/bin/ea-php82 artisan view:cache
    - cd $DEPLOYPATH && /usr/local/bin/ea-php82 artisan event:cache
    - echo "‚úÖ Application optimized for production"

    # Step 11: Set proper file permissions
    - find $DEPLOYPATH -type d -exec chmod 755 {} \;
    - find $DEPLOYPATH -type f -exec chmod 644 {} \;
    - chmod -R 777 $DEPLOYPATH/storage
    - chmod -R 777 $DEPLOYPATH/bootstrap/cache
    - |
      if [ -f $DEPLOYPATH/.env ]; then
        chmod 600 $DEPLOYPATH/.env
      fi
    - echo "‚úÖ File permissions set correctly"

    # Step 12: Verify deployment
    - |
      echo "üéâ Parish Management System Deployment Completed!"
      echo "üìä System Information:"
      cd $DEPLOYPATH && /usr/local/bin/ea-php82 artisan --version
      echo "üåê Your application is ready at: https://shemidigy.co.ke"
      echo "üìù Next steps:"
      echo "   1. Verify your .env database credentials"  
      echo "   2. Test login functionality"
      echo "   3. Check reports and member registration"
      echo "   4. Ensure all exports work properly"