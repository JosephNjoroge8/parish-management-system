# Optimized cPanel Deployment Configuration
# Fast and reliable deployment for Parish Management System wi    # Step 7: Final security and verification
    - echo "🔐 Final security settings and verification..."
    - |
      cd $DEPLOYPATH
      
      # Secure .env file
      [ -f .env ] && chmod 600 .env
      
      # Remove any development files that might have been copied
      rm -f debug_*.php test_*.php *.log run-seeders-*.sh 2>/dev/null || true
      
      # Verify Laravel is working
      if /usr/local/bin/ea-php82 artisan --version >/dev/null 2>&1; then
        echo "🎉 Parish Management System Deployed Successfully!"
        echo "🌐 Access your system at: http://parish.quovadisyouthhub.org/"
        echo ""
        echo "✅ Automatic seeders have been executed:"
        echo "   - Roles and permissions configured"
        echo "   - Production data initialized"
        echo "   - Admin user created (if specified in seeder)"
        echo ""
        echo "🔧 Manual Commands (if needed):"
        echo "   Re-run seeders: /usr/local/bin/ea-php82 artisan db:seed --force"
        echo "   Create specific admin: /usr/local/bin/ea-php82 artisan db:seed --class=ProductionSeeder --force"
        echo "   Clear cache: /usr/local/bin/ea-php82 artisan config:clear && /usr/local/bin/ea-php82 artisan cache:clear"
        echo ""
        echo "📝 Next Steps:"
        echo "   1. Test login with seeded admin credentials"
        echo "   2. Verify all MySQL database functions work correctly"
        echo "   3. Check tithes, families, and reports sections"
      else
        echo "⚠️ Deployment completed but Laravel check failed - verify manually"
      fis
# Documentation: https://docs.cpanel.net/knowledge-base/web-services/guide-to-git-deployment/

---
deployment:
  tasks:
    # Step 1: Initialize deployment path
    - export DEPLOYPATH=/home2/shemidig/parish_system/
    - echo "🚀 Starting deployment to $DEPLOYPATH"
    
    # Step 2: Fast bulk copy (much faster than individual file copies)
    - echo "📁 Copying application files..."
    - /bin/cp -R . $DEPLOYPATH/ 2>/dev/null || true
    
    # Step 3: Remove git files from deployment (security & space)
    - /bin/rm -rf $DEPLOYPATH/.git
    - /bin/rm -f $DEPLOYPATH/.gitignore
    - echo "🗑️ Git files removed from deployment"
    
    # Step 4: Essential file permissions (fast approach)
    - echo "🔒 Setting essential permissions..."
    - chmod -R 755 $DEPLOYPATH
    - chmod -R 777 $DEPLOYPATH/storage $DEPLOYPATH/bootstrap/cache 2>/dev/null || true
    
    # Step 5: Use existing environment configuration
    - echo "⚙️ Checking environment configuration..."
    - |
      cd $DEPLOYPATH
      if [ -f .env ]; then
        echo "✅ Using existing .env configuration with MySQL database"
      else
        echo "❌ ERROR: .env file not found in cPanel!"
        echo "� Please create .env file in cPanel File Manager with MySQL settings"
        exit 1
      fi
    
    # Step 6: Laravel optimization and database setup with seeders
    - echo "🚀 Optimizing Laravel and seeding database..."
    - |
      cd $DEPLOYPATH
      
      # Generate app key if needed
      /usr/local/bin/ea-php82 artisan key:generate --force --no-interaction || echo "Key generation skipped"
      
      # Clear caches (fast)
      /usr/local/bin/ea-php82 artisan config:clear --no-interaction || true
      /usr/local/bin/ea-php82 artisan cache:clear --no-interaction || true
      
      # Test database connection
      echo "🔍 Testing MySQL database connection..."
      if /usr/local/bin/ea-php82 artisan tinker --execute="try { DB::connection()->getPdo(); echo 'Database connected successfully!'; } catch(Exception \$e) { echo 'Connection failed: ' . \$e->getMessage(); exit(1); }" 2>/dev/null; then
        echo "✅ MySQL database connection successful"
        DB_CONNECTED=true
      else
        echo "❌ MySQL database connection failed - check .env settings"
        echo "📝 Verify DB_HOST, DB_DATABASE, DB_USERNAME, DB_PASSWORD in .env"
        DB_CONNECTED=false
      fi
      
      # Run migrations (with timeout protection)
      if [ "$DB_CONNECTED" = "true" ]; then
        echo "📊 Running database migrations..."
        timeout 90 /usr/local/bin/ea-php82 artisan migrate --force --no-interaction || echo "Migration timeout/error - check manually"
        
        # Run seeders for fresh installations (roles, permissions, etc.)
        echo "🌱 Seeding database with essential production data..."
        
        # Seed roles and permissions (essential for system operation)
        echo "👥 Setting up roles and permissions..."
        if /usr/local/bin/ea-php82 artisan db:seed --class=RolePermissionSeeder --force --no-interaction 2>/dev/null; then
          echo "✅ Roles and permissions seeded successfully"
        else
          echo "⚠️  Role/Permission seeder failed or data already exists"
        fi
        
        # Seed production data (sample data, default settings)
        echo "🏗️  Setting up production configuration and admin user..."
        if /usr/local/bin/ea-php82 artisan db:seed --class=ProductionSeeder --force --no-interaction 2>/dev/null; then
          echo "✅ Production data seeded successfully"
        else
          echo "⚠️  Production seeder failed or data already exists"
        fi
        
        # Run complete database seeder if needed
        echo "📋 Running complete database seeder..."
        if /usr/local/bin/ea-php82 artisan db:seed --force --no-interaction 2>/dev/null; then
          echo "✅ Complete database seeding successful"
        else
          echo "⚠️  Complete seeder failed or data already exists"
        fi
        
        echo "✅ Database seeding completed"
      else
        echo "⏭️  Skipping migrations and seeders due to database connection issues"
      fi
      
      # Create storage link
      /usr/local/bin/ea-php82 artisan storage:link --no-interaction || true
      
      # Production optimization
      /usr/local/bin/ea-php82 artisan config:cache --no-interaction || true
      /usr/local/bin/ea-php82 artisan route:cache --no-interaction || true
      
      echo "✅ Laravel setup completed"

    # Step 7: Final security and verification
    - echo "🔐 Final security settings..."
    - |
      cd $DEPLOYPATH
      
      # Secure .env file
      [ -f .env ] && chmod 600 .env
      
      # Remove any development files that might have been copied
      rm -f debug_*.php test_*.php *.log 2>/dev/null || true
      
      # Verify Laravel is working
      if /usr/local/bin/ea-php82 artisan --version >/dev/null 2>&1; then
        echo "� Parish Management System Deployed Successfully!"
        echo "🌐 Access your system at: http://parish.quovadisyouthhub.org/"
        echo "📝 Remember to verify your .env database settings!"
      else
        echo "⚠️ Deployment completed but Laravel check failed - verify manually"
      fi